<?xml version="1.0" encoding="UTF-8"?>
<jxb:bindings 
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xmlns:xjc="http://java.sun.com/xml/ns/jaxb/xjc"
	xmlns:jxb="http://java.sun.com/xml/ns/jaxb"
	xmlns:ci="http://jaxb.dev.java.net/plugin/code-injector"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	jxb:extensionBindingPrefixes="ci "
	jxb:version="2.0"
	>

<jxb:bindings schemaLocation="project.xsd">
 
 
  <jxb:bindings node="/xs:schema/xs:complexType[@name='ProjectType']">
  <ci:code><![CDATA[
  
  @javax.xml.bind.annotation.XmlTransient
  public java.util.Map<String,String> getPropertyMap()
  	{
  	if(properties==null) return new java.util.HashMap<String,String>();
  	return properties.getPropertyMap();
  	}
  	
  public String getPropertyByName(String key,String def)
  	{
  	String v=getPropertyMap().get(key);
  	return v==null?def:v;
  	}
  
  
  @javax.xml.bind.annotation.XmlTransient
  public String getGenerateId()
  	{
  	return "p1";
  	}
  
  public void link()
  	{
  	for(SampleType o: getSample())
  		{
  		o.setProject(this);
  		o.link();
  		}
  	}
  @javax.xml.bind.annotation.XmlTransient
  private java.util.List<String> _chromosomes=null;
  
  @javax.xml.bind.annotation.XmlTransient
  public java.util.List<String> getRefChromosomes() throws java.io.IOException
  	{
  	if(_chromosomes==null)
  		{
	  	String f=this.getPropertyMap().get("genome.reference.path");
	  	if(f==null) throw new java.io.IOException("Undefined property \"genome.reference.path\"");
	  	java.io.File fai=new java.io.File(f.trim()+".fai");
	  	if(!fai.exists()) throw new java.io.IOException("file missing:"+fai+". Is it indexed with \"samtools faidx\" ?");
	  	java.io.BufferedReader in=new java.io.BufferedReader(new java.io.FileReader(fai));
	  	String line;
	  	this._chromosomes= new java.util.ArrayList<String>();
	  	while((line=in.readLine())!=null)
	  		{
	  		if(line.isEmpty()) continue;
	  		String tokens[]=line.split("[\t]");
	  		this._chromosomes.add(tokens[0]);
	  		}
	  	in.close();
  		}
  	return _chromosomes;
  	}
  
  @javax.xml.bind.annotation.XmlTransient
  public String getUnmappedChromosomeName()
  	{
  	return "Unmapped";
  	}
  
  @javax.xml.bind.annotation.XmlTransient
  public java.util.List<String> getAllChromosomes() throws java.io.IOException
  	{
  	java.util.List<String> L= new java.util.ArrayList<String>(this.getRefChromosomes());
  	L.add(this.getUnmappedChromosomeName());
  	return L;
  	}
  
  ]]></ci:code>
  </jxb:bindings>
 
     <jxb:bindings node="/xs:schema/xs:complexType[@name='PropertiesType']">
  <ci:code><![CDATA[
  
    @javax.xml.bind.annotation.XmlTransient
    public java.util.Map<String,String> getPropertyMap()
  	{
  	java.util.Map<String,String> m=new java.util.HashMap<String,String>();
  	for(PropertyType p: this.getProperty())
  		{
  		if(m.containsKey(p.getKey()))
  			{
  			System.err.println("Duplicate key:"+p.getKey());
  			System.exit(-1);
  			}
  		m.put(p.getKey(),p.getValue());
  		}
  	return m;
  	}
  
  
  ]]></ci:code>
  </jxb:bindings>
 
  
    <jxb:bindings node="/xs:schema/xs:complexType[@name='PropertyType']">
  <ci:code><![CDATA[
  
  
  @Override
  public String toString()
  	{
  	return getKey()+"="+getValue();
  	}
  
  ]]></ci:code>
  </jxb:bindings>
  
  <jxb:bindings node="/xs:schema/xs:complexType[@name='SampleType']">
  <ci:code><![CDATA[
  @javax.xml.bind.annotation.XmlTransient
  private ProjectType owner;
  
  @javax.xml.bind.annotation.XmlTransient
  public ProjectType getProject()
  	{
  	return this.owner;
  	}
  
  public void setProject(ProjectType owner)
  	{
  	this.owner=owner;
  	}
  
  
    public void link()
  	{
  	if(this.sequences!=null)
  		{
	  	for(PairType o: this.sequences.getPair())
	  		{
	  		o.setSample(this);
	  		o.link();
	  		}
  		}
  	}
 
 
  @javax.xml.bind.annotation.XmlTransient
  public java.util.Map<String,String> getPropertyMap()
  	{
  	java.util.Map<String,String> p=new java.util.HashMap<String,String>();
  	p.putAll(getProject().getPropertyMap());
  	if(properties!=null)
  		{
  		p.putAll(properties.getPropertyMap());
  		}
  	return p;
  	}
  
    public String getPropertyByName(String key,String def)
  	{
  	String v=getPropertyMap().get(key);
  	return v==null?def:v;
  	}
  
  @Override
  public String toString()
  	{
  	return getName();
  	}
  
  ]]></ci:code>
  </jxb:bindings>
 
  <jxb:bindings node="/xs:schema/xs:complexType[@name='SequencesType']">
  <ci:code><![CDATA[
  ]]></ci:code>
  </jxb:bindings> 
 
  <jxb:bindings node="/xs:schema/xs:complexType[@name='PairType']">
  <ci:code><![CDATA[
  @javax.xml.bind.annotation.XmlTransient
  private SampleType owner;
  
  @javax.xml.bind.annotation.XmlTransient
  public SampleType getSample()
  	{
  	return this.owner;
  	}
  
   @javax.xml.bind.annotation.XmlTransient
   public int getIndex()
  	{
  	int i=1;
  	for(PairType p:getSample().getSequences().getPair())
  		{
  		if(p==this) break;
  		++i;
  		}
  	return i;
  	}
  
   @javax.xml.bind.annotation.XmlTransient
   private Integer generate_id=null;
   @javax.xml.bind.annotation.XmlTransient
   public String getGenerateId()
  	{
  	if(generate_id==null)
  		{
	  	int i=1;
	  	for(SampleType sample: getSample().getProject().getSample())
	  		{
	  		for(PairType p:sample.getSequences().getPair())
		  		{
		  		if(p==this)
		  			{
		  			generate_id=i;
		  			break;
		  			}
		  		++i;
		  		}
		  	if(generate_id!=null) break;
	  		}
  		}
  	return "p"+generate_id;
  	}
   
  
  
   @javax.xml.bind.annotation.XmlTransient
   public FastqType getForward()
   	{
   	return this.getFastq().get(0);
   	}
   
    @javax.xml.bind.annotation.XmlTransient
   public FastqType getReverse()
   	{
   	return this.getFastq().get(1);
   	}  
  
  
  public void setSample(SampleType owner)
  	{
  	this.owner=owner;
  	}
  
  public void link()
  	{
  	for(FastqType o: this.getFastq())
  		{
  		o.setPair(this);
  		}
  		
  	}
  
  
  ]]></ci:code>
  </jxb:bindings>  
 
  <jxb:bindings node="/xs:schema/xs:complexType[@name='FastqType']">
  <ci:code><![CDATA[
  @javax.xml.bind.annotation.XmlTransient
  private PairType owner;
  
  @javax.xml.bind.annotation.XmlTransient
  public PairType getPair()
  	{
  	return this.owner;
  	}
  
  public void setPair(PairType owner)
  	{
  	this.owner=owner;
  	}
  @Override
  public String toString()
  	{
  	return getPath();
  	}
  
  ]]></ci:code>
  </jxb:bindings>   
 
 </jxb:bindings>
</jxb:bindings>
