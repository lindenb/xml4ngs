//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2013.06.14 at 03:51:18 PM CEST 
//


package com.github.lindenb.xml4ngs.entities;

import java.util.Arrays;
import java.util.List;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.adapters.NormalizedStringAdapter;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamWriter;



public class Pair extends AbstractHasProperties
	{

    @XmlElement(required = true)
    protected Fastq fastqs[]=new Fastq[]{null,null};
    @XmlAttribute(name = "lane")
    protected Integer lane;
    @XmlAttribute(name = "split-index")
    protected Integer splitIndex;
    @XmlAttribute(name = "sample-index")
    @XmlJavaTypeAdapter(NormalizedStringAdapter.class)
    @XmlSchemaType(name = "normalizedString")
    protected String sampleIndex;
    
    
    protected PropertyMap properties=new PropertyMap();

    
    public List<Fastq> getFastq() {
        return Arrays.asList(this.fastqs);
    }

    /**
     * Gets the value of the lane property.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    public Integer getLane() {
        return lane;
    }

    /**
     * Sets the value of the lane property.
     * 
     * @param value
     *     allowed object is
     *     {@link Integer }
     *     
     */
    public void setLane(Integer value) {
        this.lane = value;
    }

    /**
     * Gets the value of the splitIndex property.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    public Integer getSplitIndex() {
        return splitIndex;
    }

    /**
     * Sets the value of the splitIndex property.
     * 
     * @param value
     *     allowed object is
     *     {@link Integer }
     *     
     */
    public void setSplitIndex(Integer value) {
        this.splitIndex = value;
    }

    /**
     * Gets the value of the sampleIndex property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getSampleIndex() {
        return sampleIndex;
    }

    /**
     * Sets the value of the sampleIndex property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setSampleIndex(String value) {
        this.sampleIndex = value;
    }
    
  @javax.xml.bind.annotation.XmlTransient
  private Sample owner;
  
  @javax.xml.bind.annotation.XmlTransient
  public Sample getSample()
  	{
  	return this.owner;
  	}
  
   @javax.xml.bind.annotation.XmlTransient
   public int getIndex()
  	{
  	int i=1;
  	for(Pair p:getSample().getSequences().getPair())
  		{
  		if(p==this) break;
  		++i;
  		}
  	return i;
  	}
  
   @javax.xml.bind.annotation.XmlTransient
   private Integer generate_id=null;
   @javax.xml.bind.annotation.XmlTransient
   public String getGenerateId()
  	{
  	if(generate_id==null)
  		{
	  	int i=1;
	  	for(Sample sample: getSample().getProject().getSample())
	  		{
	  		for(Pair p:sample.getSequences().getPair())
		  		{
		  		if(p==this)
		  			{
		  			generate_id=i;
		  			break;
		  			}
		  		++i;
		  		}
		  	if(generate_id!=null) break;
	  		}
  		}
  	return "p"+generate_id;
  	}
   
  
  
   @javax.xml.bind.annotation.XmlTransient
   public Fastq getForward()
   	{
   	return this.getFastq().get(0);
   	}
   
    @javax.xml.bind.annotation.XmlTransient
   public Fastq getReverse()
   	{
   	return this.getFastq().get(1);
   	}  
  
  
  public void setSample(Sample owner)
  	{
  	this.owner=owner;
  	}
  
  public void link()
  	{
  	for(Fastq o: this.getFastq())
  		{
  		o.setPair(this);
  		}
  		
  	}
  
  public void put(Fastq i)
  	{
	 if(i.getIndex()!=1 && i.getIndex()!=2) throw new IllegalArgumentException();
	 if(this.fastqs[i.getIndex()-1]!=null && this.fastqs[i.getIndex()-1]!=i)  throw new IllegalArgumentException();
	 this.fastqs[i.getIndex()-1]=i;
  	}
  
  public void write(XMLStreamWriter w) throws XMLStreamException
	{
	 w.writeStartElement("pair");
	 
	 
	 if(getLane()!=null) w.writeAttribute("lane",String.valueOf(getLane()));
	 if(getSampleIndex()!=null) w.writeAttribute("sample-index",String.valueOf(getSampleIndex()));
	 
	 if(!properties.isEmpty()) properties.write(w, null);

	 
	 for(Fastq p:getFastq()) p.write(w);
	 w.writeEndElement();
	}

  @Override
public AbstractHasProperties getParentProperties()
	{
	return getSample().getProject();
	}
  
}
