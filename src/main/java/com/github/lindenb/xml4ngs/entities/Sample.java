//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2013.06.14 at 03:51:18 PM CEST 
//


package com.github.lindenb.xml4ngs.entities;

import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamWriter;

import com.github.lindenb.jsonx.io.JsonXmlWriter;


public class Sample extends AbstractHasProperties{

    //protected PropertyMap properties=new PropertyMap();
    protected Sequences sequences=new Sequences();
    protected Bam bam=null;
    protected String name=null;
    private boolean enabled=true;
    

	 
	 public boolean isEnabled()
	 	{
		return enabled && !getSequences().getEnabledPairs().isEmpty();
	 	}
	 
	 public final boolean isDisabled()
	 	{
		return !isEnabled(); 
	 	}
	 
	 public void setEnabled(boolean enabled)
	 	{
		this.enabled = enabled;
	 }
	 
  
    public Sequences getSequences() {
        return sequences;
    }

    
    public void setSequences(Sequences value) {
        this.sequences = value;
    }

 
    public String getName() {
        return name;
    }
    
    public Bam getBam()
    	{
		return bam;
		}

    
    public void setBam(Bam bams) {
		this.bam = bams;
	}
    
    /**
     * Sets the value of the name property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setName(String value) {
        this.name = value;
    }
    
  private Project owner;
  
  public Project getProject()
  	{
  	return this.owner;
  	}
  
  public void setProject(Project owner)
  	{
  	this.owner=owner;
  	}
  
  
  public void write(XMLStreamWriter w) throws XMLStreamException
	{
	 w.writeStartElement("sample");
	 if(!isEnabled())
	 	{
		 w.writeAttribute("enabled","false");
	 	}
	 w.writeAttribute("name", getName());
	 
	 if(!properties.isEmpty()) new JsonXmlWriter().write(w, properties);
	 
		if(getSequences()!=null) getSequences().write(w);
	if(getBam()!=null) getBam().write(w);
	 w.writeEndElement();
	}

  
  
    public void link()
  	{
  	if(this.sequences!=null)
  		{
	  	for(Pair o: this.sequences.getPair())
	  		{
	  		o.setSample(this);
	  		o.link();
	  		}
  		}
  	if(this.bam!=null)
  		{
  		
  		this.bam.setSample(this);
	  		
  		}
  	}
 
 
  
  @Override
  public String toString()
  	{
  	return getName();
  	}
  
  
}
