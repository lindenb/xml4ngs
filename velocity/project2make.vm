#
# Makefile for NGS
#
# WWW: https://github.com/lindenb/xml4ngs
#
# Date : $now
#

#set($enabledGenotypeMethods = [])
#foreach($key in $config.project.allGenotypeMethods.keySet())
#if( $config.project.allGenotypeMethods["${key}"].enabled.value == true)
#set($doNotShowResultBool = $enabledGenotypeMethods.add($key) )
#end#end

#parse("p2m.fastq.mod.vm")
#parse("p2m.pair.mod.vm")
#parse("p2m.sample.mod.vm")
#parse("p2m.vcf.mod.vm")
#parse("p2m.chromgroup.mod.vm")
#parse("p2m.tools.mod.vm")


SHELL=/bin/bash
.SUFFIXES=


#if(${config.project.make.secondary.value} == true )

#
# treat all files as SECONDARY
#
.SECONDARY :

#end


#
# OUTPUT DIRECTORY
#
OUTDIR=${config.project.output.directory.value}

#
# misc targets
#
LIST_PHONY_TARGET=all_predictions all bamstats01 bamstats04   config fastqc_raw
TOP_TARGETS=
LIST_BWA_SORTED=

#
# fix PATH (tophat needs this)
#
export PATH:=$(PATH):$(dir ${samtools_exe}):${tabix_dir}:${Rstats_bindir}:/usr/bin

###
# FIX LOCALE (http://unix.stackexchange.com/questions/61985)
#
export LANG=en_US.UTF-8
export LC_ALL=C

#
#
# path to GHOSTVIEW
GHOSTVIEW ?= gs





#
# reference genome was set in project properties
#
#set($_global_reference_id = ${config.project.reference.ref.value})
#set($_global_chromgroup_id = ${config.project.chromgroup.value})
#set($_global_reference = ${config.references["${_global_reference_id}"]})
REF=${_global_reference.indexes.bwa["${config.tools.bwa.version}"].path}


#
# Chromosome groups
#
#
# Chromosome groups
#

#set($chromosomeGroups= ${_global_reference.groups["${_global_chromgroup_id}"]})


#if(! ${config.project.capture.ref} )
${utils.warning("'config.project.capture.ref' undefined in project.")}
capture.bed=$(OUTDIR)/BED/ensembl.genes.bed
#else
capture.bed=${config.captures["${config.project.capture.ref}"].path.value}
#end




#
# extended capture
# 
extended_capture_bed=$(OUTDIR)/BED/capture${config.project.capture.extend.value}.bed



#
# TARGETS AS LISTS
#

##########################################################################################################
#
# PHONY TARGETS
#
#

.PHONY:  ${LIST_PHONY_TARGET} 

##########################################################################################################
#
# MACRO DEFINITIONS
#
#


define bai_files
    $(foreach B,$(filter %.bam,$(1)),  $(patsubst %.bam,%.bai,$B) )
endef


define indexed_bam
    $(1) $(call bai_files, $(1))
endef

define create_symbolic_link
	cp -f $(1) $(2)
endef

define notempty
    test -s $(1) || (echo "$(1) is empty" && rm -f $(1) && exit -1) 
endef

define check_no_sge
	if  [ "${JOB_ID}" != "" ]; then echo "This process shouldn't be run with SGE. Please invoke the regular make." ; exit -1;  fi
endef





all: fastqc_raw all_predictions bamstats01 bamstats04 coverage config 


	



coverage:$(OUTDIR)/Statistics/${config.project.output.prefix}mean_coverage01.tsv
$(OUTDIR)/Statistics/${config.project.output.prefix}mean_coverage01.tsv: #foreach($sample in $project.sample) \
	$(addsuffix .sample_summary, #sample_coverage($sample)) #end
	
	mkdir -p $(dir $@) && \
	echo "sample	mean-coverage" > $@ && \
	cat $^ |\
	LC_ALL=C sort |\
	grep -v -E  '^(Total|sample_id)'  |\
	cut -d '	' -f1,3 >>  $@


bamstats01: $(OUTDIR)/Statistics/${config.project.output.prefix}bamstats01.tsv
$(OUTDIR)/Statistics/${config.project.output.prefix}bamstats01.tsv : #foreach($sample in $project.sample) \
	#sample_bamstat01_tsv($sample) #end

	mkdir -p $(dir $@) && \
	cut -d	'	' -f 2- $^  |\
	sed 's/^Sample/#Sample/'|\
	LC_ALL=C sort -t '	' -k1,1 |\
	uniq > $@


bamstats04: $(OUTDIR)/Statistics/${config.project.output.prefix}bamstats04.tsv.gz
$(OUTDIR)/Statistics/${config.project.output.prefix}bamstats04.tsv.gz : #foreach($sample in $project.sample)\
	#sample_bamstat04_tsv($sample) #end

	mkdir -p $(dir $@) && rm -f $@ $(basename $@)  #foreach($sample in $project.sample) && \
	gunzip -c #sample_bamstat04_tsv($sample) | awk -v S=${sample.name} '{printf("%s\t%s\n",S,$$0);}' >> $(basename $@) #end && \
	gzip --best $(basename $@)


#if(${config.project.one_vcf_per_sample.value}==false)

all_predictions: #foreach($genotypeMethod in ${enabledGenotypeMethods}) \
	 #vcf_multi_annot(${genotypeMethod}) #end

	#parse("p2m.annotation.multi.mod.vm")
	#parse("p2m.calling.multi.mod.vm")

#else

all_predictions: #foreach($sample in $project.sample)#foreach($genotypeMethod in ${enabledGenotypeMethods}) \
	#sample_vcf_genotyper_annotations(${sample} ${genotypeMethod}  )#end#end


#end



#foreach($sample in $project.sample)
	
	#if(${config.project.one_vcf_per_sample.value}==true)
		#parse("p2m.calling.one.mod.vm")
		#parse("p2m.annotation.one.mod.vm")	
	#end
	
	
	#parse("p2m.bam.final.mod.vm")	
	
	#foreach($chromGroup in ${chromosomeGroups.keySet()})
		#parse("p2m.recalibrate.mod.vm")	
		#parse("p2m.rmdup.mod.vm")	
		#parse("p2m.realignaroundindels.mod.vm")	
		#parse("p2m.mergepairs.mod.vm")	
	#end
	
	#set($chromGroup = "Unmapped" )
	#parse("p2m.mergepairs.mod.vm")	
	
	#foreach($pair in $sample.sequences.pair)
		#parse("p2m.alignbwa.mod.vm")
		#foreach($fastq in ${pair.fastq})
			#parse("p2m.preprocfastq.mod.vm")
		#end
	#end

#end


$(extended_capture_bed): $(capture.bed) ${REF}
	mkdir -p $(dir $@) && \
	cut -d '	' -f1,2,3 $< |\
	#execjvarkitcmd("extendbed") \
		REF=${REF} \
		X=${config.project.capture.extend} \
		VALIDATION_STRINGENCY=LENIENT |\
	LC_ALL=C sort -t '	' -k1,1 -k2,2n -k3,3n |\
	#execute_bedtools("mergeBed") -d ${config.project.capture.extend} -i - > $@



$(OUTDIR)/BED/chromgroups.txt : 
	mkdir -p $(dir $@) && \
	rm -f $@ \
	#foreach($c in ${chromosomeGroups.keySet()})&& \
	echo -n $c >> $@ #foreach($C2 in ${chromosomeGroups[${c}]}) \
	&& echo -n "	${C2}" >> $@ #end && \
	echo >> $@ #end

$(OUTDIR)/BED/non_redondant_capture.bed : $(capture.bed)
	mkdir -p $(dir $@) && \
	cut -d '	' -f1,2,3 $< |\
	#execjvarkitcmd("extendbed") \
		 REF=${REF} X=0 \
		 VALIDATION_STRINGENCY=LENIENT |\
	LC_ALL=C sort -t '	' -k1,1 -k2,2n -k3,3n |\
	#execute_bedtools("mergeBed") -i - > $@


#foreach($chromGroup in ${chromosomeGroups.keySet()})


#XCAPTURE_CHROM($chromGroup):$(extended_capture_bed)
	mkdir -p $(dir $@) && \
	awk -F '	'  'BEGIN{N=0;} {if(!($$1==" -%- " #foreach($c in ${chromosomeGroups["${chromGroup}"]}) || $$1=="${c}" #set($lastchrom = $c)#end)) next; print;N++;} END{if(N==0) printf("${lastchrom}\t1\t2\tIGNORE_PLEASE\n");}' $< > $@

#XWHOLE_CHROM($chromGroup):$(addsuffix .fai,$(REF))
	mkdir -p $(dir $@) && \
	awk -F '	'  '{if(!($$1==" -%- " #foreach($c in ${chromosomeGroups["${chromGroup}"]}) || $$1=="${c}" #end)) next; printf("%s\t0\t%d\n",$$1,int($$2)-1);}' $< > $@


#end

#parse("p2m.fastqc.mod.vm")	

config: $(OUTDIR)/CONFS/config.${now}.xml.gz
$(OUTDIR)/CONFS/config.${now}.xml.gz:
	@mkdir -p $(dir $@) && \
	echo -e "${configAsString}" |\
		gzip --best > $@


#
# END
#
