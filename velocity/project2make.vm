#
# Makefile for NGS
#
# WWW: https://github.com/lindenb/xml4ngs
#
# Date : $now
#





#parse("common.vm")
#parse("sample.vm")
#parse("fastq.vm")
#parse("pair.vm")
#parse("sample.vm")

#parse("tools.mod.vm")


#
# http://unix.stackexchange.com/questions/16702
#
SHELL=/bin/bash
.SUFFIXES=


#if(${config.project.make.secondary.value} == true )

#
# treat all files as SECONDARY
#
.SECONDARY :

#end


#
# OUTPUT DIRECTORY
#
OUTDIR=${config.project.output.directory.value}

#
# misc targets
#
LIST_PHONY_TARGET=
TOP_TARGETS=
LIST_BWA_SORTED=

#
# fix PATH (tophat needs this)
#
export PATH:=$(PATH):${samtools.dir}:${CUFFLINKS.dir}:${tabix_dir}:${Rstats_bindir}:/usr/bin

###
# FIX LOCALE (http://unix.stackexchange.com/questions/61985)
#
export LC_ALL:=C


#
#
# path to GHOSTVIEW
GHOSTVIEW ?= gs





#
# reference genome was set in project properties
#
#set($_global_reference_id = ${config.project.reference.ref.value})
#set($_global_chromgroup_id = ${config.project.chromgroup.value})
#set($_global_reference = ${config.references["${_global_reference_id}"]})
REF=${_global_reference.indexes.bwa["${config.tools.bwa.default}"].path}


#
# Chromosome groups
#
#
# Chromosome groups
#

#set($chromosomeGroups= ${_global_reference.groups["${_global_chromgroup_id}"]})


#if(! ${config.project.capture.ref} )
${utils.warning("'config.project.capture.ref' undefined in project.")}
capture.bed=$(OUTDIR)/BED/ensembl.genes.bed
#else
capture.bed=${config.captures["${config.project.capture.ref}"].path.value}
#end




#
# extended capture
# 
extended_capture_bed=$(OUTDIR)/BED/capture${config.project.capture.extend.value}.bed



#
# TARGETS AS LISTS
#

##########################################################################################################
#
# PHONY TARGETS
#
#
.PHONY: all toptarget ${LIST_PHONY_TARGET} 

##########################################################################################################
#
# MACRO DEFINITIONS
#
#


define bai_files
    $(foreach B,$(filter %.bam,$(1)),  $(patsubst %.bam,%.bai,$B) )
endef


define indexed_bam
    $(1) $(call bai_files, $(1))
endef

define create_symbolic_link
	cp -f $(1) $(2)
endef

define notempty
    test -s $(1) || (echo "$(1) is empty" && rm -f $(1) && exit -1) 
endef

define check_no_sge
	if  [ "${JOB_ID}" != "" ]; then echo "This process shouldn't be run with SGE. Please invoke the regular make." ; exit -1;  fi
endef




toptarget:
	@echo "This is the top target. Please select a specific target"
	@echo "e.g: ${TOP_TARGETS} "



all: #foreach($sample in $project.sample)#foreach($pair in $sample.sequences.pair)#foreach($c in ${chromosomeGroups.keySet()}) \
	#pair_bam_sorted_chrom($pair $c )
	#end#end #end
	
	echo ">>>" $^








##############################################################################
#
# BEGIN SAMPLES
#
##############################################################################
#foreach($sample in $project.sample)



#foreach($chromGroup in ${chromosomeGroups.keySet()})



#if( ${sample.sequences.pair.size()} > 1)
#
#
# Merge all Bams for ${sample.name} for chromosome ${chrom}
#
#
#sample_merged_chrom(${sample} ${chrom}) : #foreach($pair in ${sample.sequences.pair} ) #pair_bam_sorted_chrom(${pair} ${chromGroup}) #end
	
	mkdir -p $(dir $@) && \
	${java_exe} -jar $(PICARD)/MergeSamFiles.jar O=$@ SO=coordinate AS=true \
		#if(${project.propertyMap.containsKey("picard.merge.options")}
			 ) ${project.getPropertyByName("picard.merge.options","")} #end \
		MAX_RECORDS_IN_RAM=${PICARD_MAX_RECORDS_IN_RAM} \
		CREATE_INDEX=true \
		COMPRESSION_LEVEL=9 \
		VALIDATION_STRINGENCY=SILENT \
		USE_THREADING=true \
		COMMENT="Merged for chromosome ${chrom} from $^" \
		$(foreach B,$^, I=$(B) ) 


#end
#end

##############################################################################
#
# BEGIN PAIR ${sample.name}
#
##############################################################################

#foreach($pair in $sample.sequences.pair)





#foreach($c in ${chromosomeGroups.keySet()})


#pair_bam_sorted_chrom($pair $c ): #pair_bam_unsorted_chrom($pair $c )
	
	${samtools_exe} sort -l9 $< $(basename $@)


#end


#pair_bam_sorted_chrom($pair  "Unmapped" ): #pair_bam_unsorted_chrom($pair "Unmapped" )
	
	${samtools_exe} sort -l9  $< $(basename $@)



#
# Call BWA mem
#
#
#foreach($c in ${chromosomeGroups.keySet()})#pair_bam_unsorted_chrom($pair $c ) #end #pair_bam_unsorted_chrom($pair "Unmapped" ): ${sample.name}_sampe_pair${pair.index}_chromosomes

LIST_PHONY_TARGET+= ${sample.name}_sampe_pair${pair.index}_chromosomes

${sample.name}_sampe_pair${pair.index}_chromosomes : \
	#fastq_cutadapt(${pair.forward}) \
	#fastq_cutadapt(${pair.reverse}) \
	${REF} \
	$(OUTDIR)/BED/chromgroups.txt
	mkdir -p #sample_BAM(${pair.sample}) && \
	${bwa_exe} mem  \
		-R "@RG	ID:${pair.generateId}	LB:${pair.sample.name}	SM:${pair.sample.name}	PL:ILLUMINA	PU:${pair.lane}" \
		$(REF) \
		#fastq_cutadapt(${pair.forward}) \
		#fastq_cutadapt(${pair.reverse}) |\
		#execjvarkitcmd("splitbam2") -E -m \
			-g $(OUTDIR)/BED/chromgroups.txt \
			-p #pair_bam_unsorted_chrom($pair "__CHROM__" )  \
			-u Unmapped	



##
## BEGIN : loop over the fastqs
##
#foreach($fastq in ${pair.fastq})

#if(${config.project.haloplex.value}==true)

#
# Preprocess FASTQ
#
#fastq_cutadapt($fastq) : #fastq_trim5($fastq)

	mkdir -p $(dir $@) && \
	${cutadapt_exe} -a #if($project.propertyMap.containsKey("cutadapt.sequence.for") && ${fastq.index}==1
		)${project.propertyMap["cutadapt.sequence.for"]}#elseif(
		$project.propertyMap.containsKey("cutadapt.sequence.rev") &&  ${fastq.index}==2
		)${project.propertyMap["cutadapt.sequence.rev"]}#elseif(
		${fastq.index}==1)AGATCGGAAGAGCACACGTCTGAACTCCAGTCAC#elseif(
		${fastq.index}==2)AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGTAGATCTCGGTGGTCGCCGTATCATT#else${utils.warning("cutadapt params undefined for ${fastq} index=${fastq.index}")}#end  $< -o $(basename $@) > $(addsuffix .report.txt,$@) && \
	awk '{if(NR%4==2 && length($$0)==0) { printf("NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN\n");} else if(NR%4==0 && length($$0)==0) { printf("#[[##################################################]]#\n");} else {print;}}'  $(basename $@) > $(addsuffix .tmp,$(basename $@)) && \
	mv $(addsuffix .tmp,$(basename $@)) $(basename $@) && \
	gzip --best --force $(basename $@) && \
	$(call timeenddb,$@,cutadapt) && \
	$(call sizedb,$@) && \
	$(call notempty,$@)

#end


#end

##
## END : loop over the fastq
##

##############################################################################
#
# END PAIR ${pair.index} for sample ${pair.sample.name}
#
##############################################################################

#end

##############################################################################
#
# END SAMPLES ${sample.name}
#
##############################################################################

#end


##############################################################################
# 
# END SAMPLES
#
##############################################################################





$(OUTDIR)/BED/chromgroups.txt : 
	mkdir -p $(dir $@) && \
	rm -f $@ \
	#foreach($c in ${chromosomeGroups.keySet()})&& \
	echo -n $c >> $@ #foreach($C2 in ${chromosomeGroups[${c}]}) \
	&& echo -n "	${C2}" >> $@ #end && \
	echo >> $@ #end



#
# END
#
