#
# Makefile for NGS
#
# WWW: https://github.com/lindenb/xml4ngs
#
# Date : $now
#



#parse("genotypers.mod.vm")
#parse("captures.mod.vm")
#parse("references.mod.vm")
#parse("bcftools.mod.vm")
#parse("bedtools.mod.vm")
#parse("bwa.mod.vm")
#parse("common.mod.vm")
#parse("cutadapt.mod.vm")
#parse("fastqc.mod.vm")
#parse("fastx.mod.vm")
#parse("freebayes.mod.vm")
#parse("gatk.mod.vm")
#parse("java.mod.vm")
#parse("jvarkit.mod.vm")
#parse("picard.mod.vm")
#parse("R.mod.vm")
#parse("samtools.mod.vm")
#parse("snpeff.mod.vm")
#parse("tabix.mod.vm")
#parse("varscan.mod.vm")
#parse("vcftools.mod.vm")
#parse("vep.mod.vm")


#parse("common.vm")
#parse("sample.vm")
#parse("fastq.vm")
#parse("pair.vm")
#parse("sample.vm")

#parse("varkit.vm")
#parse("gatk.vm")
#parse("vep.vm")
#parse("snpeff.vm")
#parse("samtools.vm")
#parse("freebayes.vm")
#parse("loghsql.vm")
#parse("annotations.vm")
#parse("varscan.vm")

## PROXY SETTING 
#if($project.propertyMap.containsKey("http.proxy.host")
)#set($set_curl_proxy= " --proxy "+$project.propertyMap["http.proxy.host"]+":"+$project.propertyMap["http.proxy.port"])#set($set_jvm_proxy= " -Dhttp.proxyHost="+$project.propertyMap["http.proxy.host"]+" -Dhttp.proxyPort="+$project.propertyMap["http.proxy.port"])#else#set($set_curl_proxy ="")#set($set_jvm_proxy ="")#end

#
# http://unix.stackexchange.com/questions/16702
#
SHELL=/bin/bash


#
# treat all files as SECONDARY
#
.SECONDARY :

#
# OUTPUT DIRECTORY
#

#if(! ${project.properties.output.directory} )
${utils.error("output.directory' undefined in project.")}
#end
OUTDIR=${project.properties.output.directory}

#
# LIST_OF_PHONY_TARGET
#
LIST_PHONY_TARGET=


#
# LIST_OF_TOP_TARGETS
#
TOP_TARGETS=


#
# fix PATH (tophat needs this)
#
export PATH:=$(PATH):${BOWTIE2.dir}:${samtools.dir}:${tabix_dir}:${Rstats_bindir}:/usr/bin

###
# FIX LOCALE (http://unix.stackexchange.com/questions/61985)
#
export LC_ALL:=C


#
# reference genome was set in project properties
#

#if(! $project.properties.genome.id ) 
${utils.warning("project.properties.genome.id' undefined in project.")}
#set($user_genome_id = "GRCh37")
#else
#set($user_genome_id = $project.properties.genome.id )
#end
#set($user_reference = $references.get($user_genome_id) )



REF=${user_reference.indexes.bwa.get($bwa_version).path.value}


#if(! $project.properties.genome.groupid ) 
#set($user_group_id = ${user_reference.defaultgroup})
${utils.warning("project.properties.genome.groupid' undefined in project. Using default : $user_group_id")}
#else
#set($user_group_id = $project.properties.genome.groupid )
#end
#set($user_chrom_group = $user_reference.groups.get($user_group_id) )




#if(! $project.properties.capture.id ) 
${utils.warning("project.properties.capture.id' undefined in project.")}
capture.bed=$(OUTDIR)/BED/ensembl.genes.bed
#else
capture.bed=${captures.get($project.properties.capture.id).path.value}
#end



#
# TARGETS AS LISTS
#

##########################################################################################################
#
# PHONY TARGETS
#
#
.PHONY: all toptarget ${LIST_PHONY_TARGET} 



define bai_files
    $(foreach B,$(filter %.bam,$(1)),  $(patsubst %.bam,%.bai,$B) )
endef


define indexed_bam
    $(1) $(call bai_files, $(1))
endef


toptarget:
	@echo "This is the top target. Please select a specific target"
	@echo "e.g: ${TOP_TARGETS} "

all: ${TOP_TARGETS}  fastx fastqc

#foreach($sample in ${project.samples})

#foreach($pair in ${sample.pairs})


#foreach($GroupName in $user_chrom_group.keySet())#pair_bam_sorted_chrom($pair $GroupName ) #end : ${sample.name}_sampe_pair${pair.id}_chromosomes

LIST_PHONY_TARGET+= ${sample.name}_sampe_pair${pair.id}_chromosomes


${sample.name.value}_sampe_pair${pair.id}_chromosomes : \
	#fastq_cutadapt(${pair.fastqs[0]}) \
	#fastq_cutadapt(${pair.fastqs[1]}) \
	${REF} \
	$(OUTDIR)/BED/groups.txt 
	mkdir -p #sample_BAM(${sample}) && \
	${bwa_exe} mem  \
		-R "@RG	ID:${pair.id.value}	LB:${sample.name.value}	SM:${sample.name.value}	PL:ILLUMINA	PU:${pair.lane}" \
		$(REF) \
		#fastq_cutadapt(${pair.fastqs[0]}) \
		#fastq_cutadapt(${pair.fastqs[1]}) |\
		#execjvarkitcmd("splitbam") \
			GP=$(OUTDIR)/BED/groups.txt \
			EMPTY_BAM=true \
			MOCK=true \
			MAX_RECORDS_IN_RAM=${PICARD_MAX_RECORDS_IN_RAM} \
			REF=${REF} \
			OUT_FILE_PATTERN=#pair_bam_sorted_chrom($pair "__CHROM__" )  \
			TMP_DIR=#sample_BAM(${pair.sample}) \
			IS=false \
			VALIDATION_STRINGENCY=LENIENT \
			CREATE_INDEX=true \
			UNDERTERMINED_NAME=Unmapped	




##
## BEGIN : loop over the fastqs
##
#foreach($fastq in ${pair.fastq})
#if(${project.getPropertyByName("is.haloplex","no")}=="yes")

#
# Preprocess FASTQ
#
#fastq_cutadapt($fastq) : #fastq_trim5($fastq)

	$(call timebegindb,$@,cutadapt) && \
	$(call sizedb,$<) && \
	mkdir -p $(dir $@) && \
	${cutadapt_exe} -a #if($project.propertyMap.containsKey("cutadapt.sequence.for") && ${fastq.index}==1
		)${project.propertyMap["cutadapt.sequence.for"]}#elseif(
		$project.propertyMap.containsKey("cutadapt.sequence.rev") &&  ${fastq.index}==2
		)${project.propertyMap["cutadapt.sequence.rev"]}#elseif(
		${fastq.index}==1)AGATCGGAAGAGCACACGTCTGAACTCCAGTCAC#elseif(
		${fastq.index}==2)AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGTAGATCTCGGTGGTCGCCGTATCATT#else${utils.warning("cutadapt params undefined for ${fastq} index=${fastq.index}")}#end  $< -o $(basename $@) > $(addsuffix .report.txt,$@) && \
	awk '{if(NR%4==2 && length($$0)==0) { printf("NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN\n");} else if(NR%4==0 && length($$0)==0) { printf("#[[##################################################]]#\n");} else {print;}}'  $(basename $@) > $(addsuffix .tmp,$(basename $@)) && \
	mv $(addsuffix .tmp,$(basename $@)) $(basename $@) && \
	gzip --best --force $(basename $@) && \
	$(call timeenddb,$@,cutadapt) && \
	$(call sizedb,$@) && \
	$(call notempty,$@)

#end

#if(${fastq.hasProperty("trim5")})

#
# remove ${fastq.getProperty("trim5")} bases from 5'
# 

#fastq_trim5($fastq) : #fastq_raw($fastq)
	$(call timebegindb,$@,trim5) && \
	$(call sizedb,$<) && \
	mkdir -p $(dir $@) && \
	gunzip -c $< |\
	awk '{if(NR%4==2 || NR%4==0) {if(length($$0)<=${fastq.getProperty("trim5")}) {printf("\n");} else {printf("%s\n",subst($$0,${fastq.getProperty("trim5")}));} } else {print;}}' |\
	gzip --best > $@ && \
	$(call timeenddb,$@,trim5) && \
	$(call sizedb,$@) && \
	$(call notempty,$@)

#end

#end

##
## END : loop over the fastq
##


##
## END OF LOOP OVER PAIR
##

#end

#end

$(OUTDIR)/BED/groups.txt : 
	mkdir -p $(dir $@) && \
	rm -f $@ #foreach($key in $user_chrom_group.keySet()) && \
	echo -n "${key}" >> $@ #foreach($C in $user_chrom_group.get($key)) && \
	echo -n "  ${C.value}" >> $@ #end && echo  >> $@  #end

#
# END
#





